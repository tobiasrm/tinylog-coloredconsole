#
# Tinylog
#	
#   For config details see http://www.tinylog.org/configuration 
#

tinylog.locale = en_US


# --------------------------------------------
# ColoredConsole
# --------------------------------------------
# Default tinylog console writer - will print assigned level and higher 

# For coloring, we define a writer per each level (singleleve=true) and 
# and assign colors as ASCII codes in the format. Some foreground colors:
# - white: 	\u001B[97m
# - purple:	\u001B[34m
# - cyan: 	\u001B[36m
# - green:	\u001B[32m
# - yellow: \u001B[33m
# - red: 	\u001B[31m
# - light gray: \u001B[37m
# - dark gray: 	\u001B[90m
# Reset colors:	\u001B[0m

# For more color codes see: https://en.wikipedia.org/wiki/ANSI_escape_code


# ---------- DEFAULT EXAMPLE: level specific coloring (of the level field) ---------- 

# Note that we do not need post* parameters as the color is already set (to dark gray) after the post level tag
# and reset to default coloring at the end.
tinylog.writerColConsole               = coloredconsole
tinylog.writerColConsole.level         = trace
tinylog.writerColConsole.stream        = out
tinylog.writerColConsole.buffered      = true
tinylog.writerColConsole.format        = [[preLevelTag]]{{level}|min-size=7}[[postLevelTag]]  {\u001B[90m{date:yyyy-MM-dd HH:mm:ss}  \u001B[38;5;24m{class_name}:{line} - {method}()|min-size=65} \u001B[97m: \u001B[37m{message}\u001B[0m 
tinylog.writerColConsole.preLevelTag   = [[preLevelTag]]
tinylog.writerColConsole.postLevelTag  = [[postLevelTag]]
tinylog.writerColConsole.preTrace      = \u001B[97m
#tinylog.writerColConsole.postTrace     = \u001B[0m
tinylog.writerColConsole.preDebug      = \u001B[36m
#tinylog.writerColConsole.postDebug     = \u001B[0m
tinylog.writerColConsole.preInfo       = \u001B[32m
#tinylog.writerColConsole.postInfo      = \u001B[0m
tinylog.writerColConsole.preWarn       = \u001B[33m
tinylog.writerColConsole.postWarn      = \u001B[37m
tinylog.writerColConsole.preError      = \u001B[31m
#tinylog.writerColConsole.postError     = \u001B[0m


# ---------- lOG-LEVEL DECORATION EXAMPLE: level specific coloring (of the level field) with surrounding decorations ---------- 

# Note that we do not need post* parameters as the color is already set (to dark gray) after the post level tag
# and reset to default coloring at the end.
#tinylog.writerColConsole               = coloredconsole
#tinylog.writerColConsole.level         = trace
#tinylog.writerColConsole.stream        = out
#tinylog.writerColConsole.buffered      = true
#tinylog.writerColConsole.format        = [[preLevelTag]]{level}[[postLevelTag]]  {\u001B[90m{date:yyyy-MM-dd HH:mm:ss}  \u001B[38;5;24m{class_name}:{line} - {method}()|min-size=65} \u001B[97m: \u001B[37m{message}\u001B[0m 
#tinylog.writerColConsole.preLevelTag   = [[preLevelTag]]
#tinylog.writerColConsole.postLevelTag  = [[postLevelTag]]
#tinylog.writerColConsole.preTrace      = \u001B[49m    \u001B[97m
#tinylog.writerColConsole.postTrace     = \u001B[0m    \u001B[0m
#tinylog.writerColConsole.preDebug      = \u001B[49m-   \u001B[36m
#tinylog.writerColConsole.postDebug     = \u001B[0m   -\u001B[0m
#tinylog.writerColConsole.preInfo       = \u001B[42m \u001B[49m   \u001B[32m
#tinylog.writerColConsole.postInfo      = \u001B[49m    \u001B[42m \u001B[0m
#tinylog.writerColConsole.preWarn       = \u001B[43m  \u001B[49m \u001B[33m
#tinylog.writerColConsole.postWarn      = \u001B[49m \u001B[43m  \u001B[0m\u001B[37m
#tinylog.writerColConsole.preError      = \u001B[31m\u001B[41m < \u001B[49m \u001B[31m
#tinylog.writerColConsole.postError     = \u001B[49m \u001B[41m > \u001B[0m


# ---------- CUSTOM TAG EXAMPLE: colorize custom tag coloring ---------- 
#
## Custom tags are assumed to be source code generated
#tinylog.writerColConsole                = coloredconsole
#tinylog.writerColConsole.level          = trace
#tinylog.writerColConsole.stream         = out
#tinylog.writerColConsole.buffered       = true
#tinylog.writerColConsole.format         = {level} {\u001B[90m{date:yyyy-MM-dd HH:mm:ss}  \u001B[38;5;24m{class_name}:{line} - {method}()|min-size=55} \u001B[97m: \u001B[37m{message}\u001B[0m 
#
## Example 1: sequential coloring (replacement provides tags that are replaced sequentially by processing of custom tags 2..5) 
#tinylog.writerColConsole.preCustomTag1  = [[someCustomPreTag]]
#tinylog.writerColConsole.preCustom1     = <----
#tinylog.writerColConsole.postCustomTag1 = [[someCustomPostTag]]
#tinylog.writerColConsole.postCustom1    = ----- and tag-based added <==== other text ====> as for example the UNCAUGHT EXCEPTION
#
## Example 2: coloring of any occurrence
#tinylog.writerColConsole.preCustomTag2  = -----
#tinylog.writerColConsole.preCustom2     = \u001B[34m-----\u001B[37m
#
## Example 3: coloring within the tags 
## Note that the tags distinguish from the others
#tinylog.writerColConsole.preCustomTag3  = <----
#tinylog.writerColConsole.preCustom3     = <----\u001B[33m
#tinylog.writerColConsole.postCustomTag3 = ---->
#tinylog.writerColConsole.postCustom3    = \u001B[37m----> 
#
## Example 4: coloring of tagged content including tags
#tinylog.writerColConsole.preCustomTag4  = <====
#tinylog.writerColConsole.preCustom4     = \u001B[32m=====
#tinylog.writerColConsole.postCustomTag4 = ====>
#tinylog.writerColConsole.postCustom4    = \u001B[32m=====\u001B[37m
#
## Example 5:  coloring of tagged content including tags
## Note that the tag replacement is enriched with '<' and '>', respectively
#tinylog.writerColConsole.preCustomTag5  = UNCAUGHT EXCEPTION
#tinylog.writerColConsole.preCustom5     = \u001B[41m\u001B[97m < UNCAUGHT EXCEPTION > \u001B[49m\u001B[37m
